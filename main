/*
 * File:   main.c
 * Author: Jonathan Guerrero
 *
 * Created on 10 de abril de 2022, 0:12
 */

// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#include <stdio.h> 
#define _XTAL_FREQ 4000000

char conta = 4;
char valor;

void configuracionPin()
{
    TRISB = 0x00;
    TRISC = 0X00;
    ADCON1 = 0b00000110;
    TRISA = 0b00000011; 
}

void cambios(valor)
{
    switch(valor)
    {
        case 1:
            PORTB = 0X4C;
            PORTC = 0;            
            __delay_ms(5);
            
            break;
        
        case 2:
            PORTB = 0X4A;
            PORTC = 1;
            __delay_ms(5);
            break;
        
        case 3:
            PORTB = 0X49;
            PORTC = 2;
            __delay_ms(5);
            break;
            
        case 4:
            PORTB = 0X80;
            PORTC = 3;
            __delay_ms(5);
            break;
            
        case 5:
            PORTB = 0X21;
            PORTC = 4;
            __delay_ms(5);
            break;
            
        case 6:
            PORTB = 0X11;
            PORTC = 5;
            __delay_ms(5);
            break;
            
        case 7:
            PORTB = 0X22;
            PORTC = 6;
            __delay_ms(5);
            break;
            
        case 8:
            PORTB = 0X12;
            PORTC = 7;
            __delay_ms(5);
            break;
        
        case 9:
            PORTB = 0X24;
            PORTC = 8;
            __delay_ms(5);
            break;
        
        case 10:
            PORTB = 0X14;
            PORTC = 9;
            __delay_ms(5);
            break;
            
        default:
            //PORTC = conta;
            break;
    }
}
void main(void) {
    configuracionPin();
    
    while(1)
    {
        if(conta >=1 && conta <= 10)
        {
            if(PORTAbits.RA0)
            {
                __delay_ms(2);
                while(PORTAbits.RA0 == 1);
                conta = conta + 1;
            }
            else if(PORTAbits.RA1)
            {
                __delay_ms(2);
                while(PORTAbits.RA1 == 1);
                conta = conta - 1;
            }

            //PORTC = conta;
            cambios(conta);
        }
        else
        {
            if(conta>=10)
            {
                __delay_ms(2);
                conta = 10;
            }
            if(conta<=1)
            {
                __delay_ms(2);
                conta = 1;
            }
        }
    }
    return;
}
